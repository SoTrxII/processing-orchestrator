// Code generated by mockery. DO NOT EDIT.

package test_utils

import (
	processing_common "processing-orchestrator/pkg/processing-common"
	uploader "processing-orchestrator/pkg/uploader"

	mock "github.com/stretchr/testify/mock"
)

// MockUploadingService is an autogenerated mock type for the UploadingService type
type MockUploadingService struct {
	mock.Mock
}

type MockUploadingService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUploadingService) EXPECT() *MockUploadingService_Expecter {
	return &MockUploadingService_Expecter{mock: &_m.Mock}
}

// AddToPlaylist provides a mock function with given fields: vidId, playlistId
func (_m *MockUploadingService) AddToPlaylist(vidId string, playlistId string) error {
	ret := _m.Called(vidId, playlistId)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(vidId, playlistId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockUploadingService_AddToPlaylist_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddToPlaylist'
type MockUploadingService_AddToPlaylist_Call struct {
	*mock.Call
}

// AddToPlaylist is a helper method to define mock.On call
//   - vidId string
//   - playlistId string
func (_e *MockUploadingService_Expecter) AddToPlaylist(vidId interface{}, playlistId interface{}) *MockUploadingService_AddToPlaylist_Call {
	return &MockUploadingService_AddToPlaylist_Call{Call: _e.mock.On("AddToPlaylist", vidId, playlistId)}
}

func (_c *MockUploadingService_AddToPlaylist_Call) Run(run func(vidId string, playlistId string)) *MockUploadingService_AddToPlaylist_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockUploadingService_AddToPlaylist_Call) Return(_a0 error) *MockUploadingService_AddToPlaylist_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUploadingService_AddToPlaylist_Call) RunAndReturn(run func(string, string) error) *MockUploadingService_AddToPlaylist_Call {
	_c.Call.Return(run)
	return _c
}

// CreatePlaylist provides a mock function with given fields: opt
func (_m *MockUploadingService) CreatePlaylist(opt *processing_common.VideoOpt) (*uploader.Playlist, error) {
	ret := _m.Called(opt)

	var r0 *uploader.Playlist
	var r1 error
	if rf, ok := ret.Get(0).(func(*processing_common.VideoOpt) (*uploader.Playlist, error)); ok {
		return rf(opt)
	}
	if rf, ok := ret.Get(0).(func(*processing_common.VideoOpt) *uploader.Playlist); ok {
		r0 = rf(opt)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*uploader.Playlist)
		}
	}

	if rf, ok := ret.Get(1).(func(*processing_common.VideoOpt) error); ok {
		r1 = rf(opt)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUploadingService_CreatePlaylist_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreatePlaylist'
type MockUploadingService_CreatePlaylist_Call struct {
	*mock.Call
}

// CreatePlaylist is a helper method to define mock.On call
//   - opt *processing_common.VideoOpt
func (_e *MockUploadingService_Expecter) CreatePlaylist(opt interface{}) *MockUploadingService_CreatePlaylist_Call {
	return &MockUploadingService_CreatePlaylist_Call{Call: _e.mock.On("CreatePlaylist", opt)}
}

func (_c *MockUploadingService_CreatePlaylist_Call) Run(run func(opt *processing_common.VideoOpt)) *MockUploadingService_CreatePlaylist_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*processing_common.VideoOpt))
	})
	return _c
}

func (_c *MockUploadingService_CreatePlaylist_Call) Return(_a0 *uploader.Playlist, _a1 error) *MockUploadingService_CreatePlaylist_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUploadingService_CreatePlaylist_Call) RunAndReturn(run func(*processing_common.VideoOpt) (*uploader.Playlist, error)) *MockUploadingService_CreatePlaylist_Call {
	_c.Call.Return(run)
	return _c
}

// SetThumbnail provides a mock function with given fields: vidId, thumbKey
func (_m *MockUploadingService) SetThumbnail(vidId string, thumbKey string) error {
	ret := _m.Called(vidId, thumbKey)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(vidId, thumbKey)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockUploadingService_SetThumbnail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetThumbnail'
type MockUploadingService_SetThumbnail_Call struct {
	*mock.Call
}

// SetThumbnail is a helper method to define mock.On call
//   - vidId string
//   - thumbKey string
func (_e *MockUploadingService_Expecter) SetThumbnail(vidId interface{}, thumbKey interface{}) *MockUploadingService_SetThumbnail_Call {
	return &MockUploadingService_SetThumbnail_Call{Call: _e.mock.On("SetThumbnail", vidId, thumbKey)}
}

func (_c *MockUploadingService_SetThumbnail_Call) Run(run func(vidId string, thumbKey string)) *MockUploadingService_SetThumbnail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockUploadingService_SetThumbnail_Call) Return(_a0 error) *MockUploadingService_SetThumbnail_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUploadingService_SetThumbnail_Call) RunAndReturn(run func(string, string) error) *MockUploadingService_SetThumbnail_Call {
	_c.Call.Return(run)
	return _c
}

// Upload provides a mock function with given fields: jobId, storageKey, opt
func (_m *MockUploadingService) Upload(jobId string, storageKey string, opt *processing_common.VideoOpt) (*uploader.Video, error) {
	ret := _m.Called(jobId, storageKey, opt)

	var r0 *uploader.Video
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, *processing_common.VideoOpt) (*uploader.Video, error)); ok {
		return rf(jobId, storageKey, opt)
	}
	if rf, ok := ret.Get(0).(func(string, string, *processing_common.VideoOpt) *uploader.Video); ok {
		r0 = rf(jobId, storageKey, opt)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*uploader.Video)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, *processing_common.VideoOpt) error); ok {
		r1 = rf(jobId, storageKey, opt)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUploadingService_Upload_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Upload'
type MockUploadingService_Upload_Call struct {
	*mock.Call
}

// Upload is a helper method to define mock.On call
//   - jobId string
//   - storageKey string
//   - opt *processing_common.VideoOpt
func (_e *MockUploadingService_Expecter) Upload(jobId interface{}, storageKey interface{}, opt interface{}) *MockUploadingService_Upload_Call {
	return &MockUploadingService_Upload_Call{Call: _e.mock.On("Upload", jobId, storageKey, opt)}
}

func (_c *MockUploadingService_Upload_Call) Run(run func(jobId string, storageKey string, opt *processing_common.VideoOpt)) *MockUploadingService_Upload_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(*processing_common.VideoOpt))
	})
	return _c
}

func (_c *MockUploadingService_Upload_Call) Return(_a0 *uploader.Video, _a1 error) *MockUploadingService_Upload_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUploadingService_Upload_Call) RunAndReturn(run func(string, string, *processing_common.VideoOpt) (*uploader.Video, error)) *MockUploadingService_Upload_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockUploadingService creates a new instance of MockUploadingService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUploadingService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUploadingService {
	mock := &MockUploadingService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
