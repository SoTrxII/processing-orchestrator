// Code generated by mockery. DO NOT EDIT.

package test_utils

import (
	job_store "processing-orchestrator/pkg/job-store"

	mock "github.com/stretchr/testify/mock"
)

// MockJobStore is an autogenerated mock type for the JobStore type
type MockJobStore struct {
	mock.Mock
}

type MockJobStore_Expecter struct {
	mock *mock.Mock
}

func (_m *MockJobStore) EXPECT() *MockJobStore_Expecter {
	return &MockJobStore_Expecter{mock: &_m.Mock}
}

// Delete provides a mock function with given fields: id
func (_m *MockJobStore) Delete(id string) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockJobStore_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockJobStore_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - id string
func (_e *MockJobStore_Expecter) Delete(id interface{}) *MockJobStore_Delete_Call {
	return &MockJobStore_Delete_Call{Call: _e.mock.On("Delete", id)}
}

func (_c *MockJobStore_Delete_Call) Run(run func(id string)) *MockJobStore_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockJobStore_Delete_Call) Return(_a0 error) *MockJobStore_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockJobStore_Delete_Call) RunAndReturn(run func(string) error) *MockJobStore_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: id
func (_m *MockJobStore) Get(id string) (*job_store.JobState, error) {
	ret := _m.Called(id)

	var r0 *job_store.JobState
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*job_store.JobState, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) *job_store.JobState); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*job_store.JobState)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockJobStore_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockJobStore_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - id string
func (_e *MockJobStore_Expecter) Get(id interface{}) *MockJobStore_Get_Call {
	return &MockJobStore_Get_Call{Call: _e.mock.On("Get", id)}
}

func (_c *MockJobStore_Get_Call) Run(run func(id string)) *MockJobStore_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockJobStore_Get_Call) Return(_a0 *job_store.JobState, _a1 error) *MockJobStore_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockJobStore_Get_Call) RunAndReturn(run func(string) (*job_store.JobState, error)) *MockJobStore_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetAll provides a mock function with given fields: reload
func (_m *MockJobStore) GetAll(reload bool) ([]*job_store.JobState, error) {
	ret := _m.Called(reload)

	var r0 []*job_store.JobState
	var r1 error
	if rf, ok := ret.Get(0).(func(bool) ([]*job_store.JobState, error)); ok {
		return rf(reload)
	}
	if rf, ok := ret.Get(0).(func(bool) []*job_store.JobState); ok {
		r0 = rf(reload)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*job_store.JobState)
		}
	}

	if rf, ok := ret.Get(1).(func(bool) error); ok {
		r1 = rf(reload)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockJobStore_GetAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAll'
type MockJobStore_GetAll_Call struct {
	*mock.Call
}

// GetAll is a helper method to define mock.On call
//   - reload bool
func (_e *MockJobStore_Expecter) GetAll(reload interface{}) *MockJobStore_GetAll_Call {
	return &MockJobStore_GetAll_Call{Call: _e.mock.On("GetAll", reload)}
}

func (_c *MockJobStore_GetAll_Call) Run(run func(reload bool)) *MockJobStore_GetAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(bool))
	})
	return _c
}

func (_c *MockJobStore_GetAll_Call) Return(_a0 []*job_store.JobState, _a1 error) *MockJobStore_GetAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockJobStore_GetAll_Call) RunAndReturn(run func(bool) ([]*job_store.JobState, error)) *MockJobStore_GetAll_Call {
	_c.Call.Return(run)
	return _c
}

// Upsert provides a mock function with given fields: job
func (_m *MockJobStore) Upsert(job *job_store.JobState) error {
	ret := _m.Called(job)

	var r0 error
	if rf, ok := ret.Get(0).(func(*job_store.JobState) error); ok {
		r0 = rf(job)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockJobStore_Upsert_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Upsert'
type MockJobStore_Upsert_Call struct {
	*mock.Call
}

// Upsert is a helper method to define mock.On call
//   - job *job_store.JobState
func (_e *MockJobStore_Expecter) Upsert(job interface{}) *MockJobStore_Upsert_Call {
	return &MockJobStore_Upsert_Call{Call: _e.mock.On("Upsert", job)}
}

func (_c *MockJobStore_Upsert_Call) Run(run func(job *job_store.JobState)) *MockJobStore_Upsert_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*job_store.JobState))
	})
	return _c
}

func (_c *MockJobStore_Upsert_Call) Return(_a0 error) *MockJobStore_Upsert_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockJobStore_Upsert_Call) RunAndReturn(run func(*job_store.JobState) error) *MockJobStore_Upsert_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockJobStore creates a new instance of MockJobStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockJobStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockJobStore {
	mock := &MockJobStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
