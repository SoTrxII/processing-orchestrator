// Code generated by mockery. DO NOT EDIT.

package test_utils

import mock "github.com/stretchr/testify/mock"

// MockCookingService is an autogenerated mock type for the CookingService type
type MockCookingService struct {
	mock.Mock
}

type MockCookingService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCookingService) EXPECT() *MockCookingService_Expecter {
	return &MockCookingService_Expecter{mock: &_m.Mock}
}

// Cook provides a mock function with given fields: jobId, recordIds
func (_m *MockCookingService) Cook(jobId string, recordIds []string) ([]string, error) {
	ret := _m.Called(jobId, recordIds)

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(string, []string) ([]string, error)); ok {
		return rf(jobId, recordIds)
	}
	if rf, ok := ret.Get(0).(func(string, []string) []string); ok {
		r0 = rf(jobId, recordIds)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(string, []string) error); ok {
		r1 = rf(jobId, recordIds)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCookingService_Cook_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Cook'
type MockCookingService_Cook_Call struct {
	*mock.Call
}

// Cook is a helper method to define mock.On call
//   - jobId string
//   - recordIds []string
func (_e *MockCookingService_Expecter) Cook(jobId interface{}, recordIds interface{}) *MockCookingService_Cook_Call {
	return &MockCookingService_Cook_Call{Call: _e.mock.On("Cook", jobId, recordIds)}
}

func (_c *MockCookingService_Cook_Call) Run(run func(jobId string, recordIds []string)) *MockCookingService_Cook_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].([]string))
	})
	return _c
}

func (_c *MockCookingService_Cook_Call) Return(_a0 []string, _a1 error) *MockCookingService_Cook_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCookingService_Cook_Call) RunAndReturn(run func(string, []string) ([]string, error)) *MockCookingService_Cook_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockCookingService creates a new instance of MockCookingService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCookingService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCookingService {
	mock := &MockCookingService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
