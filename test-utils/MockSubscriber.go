// Code generated by mockery. DO NOT EDIT.

package test_utils

import (
	common "github.com/dapr/go-sdk/service/common"
	mock "github.com/stretchr/testify/mock"
)

// MockSubscriber is an autogenerated mock type for the Subscriber type
type MockSubscriber struct {
	mock.Mock
}

type MockSubscriber_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSubscriber) EXPECT() *MockSubscriber_Expecter {
	return &MockSubscriber_Expecter{mock: &_m.Mock}
}

// AddTopicEventHandler provides a mock function with given fields: sub, fn
func (_m *MockSubscriber) AddTopicEventHandler(sub *common.Subscription, fn common.TopicEventHandler) error {
	ret := _m.Called(sub, fn)

	var r0 error
	if rf, ok := ret.Get(0).(func(*common.Subscription, common.TopicEventHandler) error); ok {
		r0 = rf(sub, fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockSubscriber_AddTopicEventHandler_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddTopicEventHandler'
type MockSubscriber_AddTopicEventHandler_Call struct {
	*mock.Call
}

// AddTopicEventHandler is a helper method to define mock.On call
//   - sub *common.Subscription
//   - fn common.TopicEventHandler
func (_e *MockSubscriber_Expecter) AddTopicEventHandler(sub interface{}, fn interface{}) *MockSubscriber_AddTopicEventHandler_Call {
	return &MockSubscriber_AddTopicEventHandler_Call{Call: _e.mock.On("AddTopicEventHandler", sub, fn)}
}

func (_c *MockSubscriber_AddTopicEventHandler_Call) Run(run func(sub *common.Subscription, fn common.TopicEventHandler)) *MockSubscriber_AddTopicEventHandler_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*common.Subscription), args[1].(common.TopicEventHandler))
	})
	return _c
}

func (_c *MockSubscriber_AddTopicEventHandler_Call) Return(_a0 error) *MockSubscriber_AddTopicEventHandler_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSubscriber_AddTopicEventHandler_Call) RunAndReturn(run func(*common.Subscription, common.TopicEventHandler) error) *MockSubscriber_AddTopicEventHandler_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockSubscriber creates a new instance of MockSubscriber. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSubscriber(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSubscriber {
	mock := &MockSubscriber{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
