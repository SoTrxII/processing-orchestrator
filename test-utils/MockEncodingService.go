// Code generated by mockery. DO NOT EDIT.

package test_utils

import mock "github.com/stretchr/testify/mock"

// MockEncodingService is an autogenerated mock type for the EncodingService type
type MockEncodingService struct {
	mock.Mock
}

type MockEncodingService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockEncodingService) EXPECT() *MockEncodingService_Expecter {
	return &MockEncodingService_Expecter{mock: &_m.Mock}
}

// Encode provides a mock function with given fields: jobId, audioKeys, bgAudioKey
func (_m *MockEncodingService) Encode(jobId string, audioKeys []string, bgAudioKey string) (string, error) {
	ret := _m.Called(jobId, audioKeys, bgAudioKey)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string, []string, string) (string, error)); ok {
		return rf(jobId, audioKeys, bgAudioKey)
	}
	if rf, ok := ret.Get(0).(func(string, []string, string) string); ok {
		r0 = rf(jobId, audioKeys, bgAudioKey)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string, []string, string) error); ok {
		r1 = rf(jobId, audioKeys, bgAudioKey)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockEncodingService_Encode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Encode'
type MockEncodingService_Encode_Call struct {
	*mock.Call
}

// Encode is a helper method to define mock.On call
//   - jobId string
//   - audioKeys []string
//   - bgAudioKey string
func (_e *MockEncodingService_Expecter) Encode(jobId interface{}, audioKeys interface{}, bgAudioKey interface{}) *MockEncodingService_Encode_Call {
	return &MockEncodingService_Encode_Call{Call: _e.mock.On("Encode", jobId, audioKeys, bgAudioKey)}
}

func (_c *MockEncodingService_Encode_Call) Run(run func(jobId string, audioKeys []string, bgAudioKey string)) *MockEncodingService_Encode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].([]string), args[2].(string))
	})
	return _c
}

func (_c *MockEncodingService_Encode_Call) Return(_a0 string, _a1 error) *MockEncodingService_Encode_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockEncodingService_Encode_Call) RunAndReturn(run func(string, []string, string) (string, error)) *MockEncodingService_Encode_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockEncodingService creates a new instance of MockEncodingService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockEncodingService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockEncodingService {
	mock := &MockEncodingService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
